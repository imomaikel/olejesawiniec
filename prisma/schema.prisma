// [ ====== GENERAL SETTINGS START ====== ]
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// [ ====== SHOP MODELS ====== ]
model Product {
  id            String          @id @default(cuid())
  label         String          @unique
  link          String          @unique
  enabled       Boolean?        @default(false)
  description   String?         @db.Text
  mainPhoto     String?
  extraPhotos   ExtraPhoto[]
  variants      Variant[]
  lowestPrice   Float?
  tags          Tag[]
  details       ProductDetail[]
  nutritionFact NutritionFact?
  opinions      Opinion[]

  wishList        WishList[]
  paymentProducts PaymentProduct[]

  customFeatures CustomFeature[]

  ratings Rating[]
  rating  Float

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model WishList {
  id   String @id @default(cuid())
  user User[]

  variant Variant[]

  createdAt DateTime @default(now())

  product   Product? @relation(fields: [productId], references: [id])
  productId String?
}

model Category {
  id    String @id @default(cuid())
  label String @unique

  product        Product[]
  customFeatures CustomFeature[]
}

model Rating {
  id    String @id @default(cuid())
  score Int    @db.TinyInt

  // TODO AUTH PROFILE
  author String
  // 

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAd DateTime @default(now())
}

model Opinion {
  id         String  @id @default(cuid())
  showAvatar Boolean
  content    String

  // TODO AUTH PROFILE
  author String
  // 

  product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAt DateTime @default(now())
}

model NutritionFact {
  id                 String @id @default(cuid())
  fat                Float
  saturatedFat       Float?
  polyunsaturatedFat Float?
  monounsaturatedFat Float?
  carbohydrate       Float?
  carbohydrateSugar  Float?
  protein            Float?
  fiber              Float?
  sodium             Float?

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique
}

model ProductDetail {
  id      String @id @default(cuid())
  content String

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
}

model ExtraPhoto {
  id   String @id @default(cuid())
  url  String
  path String

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
}

model Variant {
  id       String @id @default(cuid())
  unit     String
  price    Float
  capacity Int
  stock    Int
  parentId String

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?

  wishList       WishList[]
  basketVariants BasketVariants[]

  @@unique([capacity, unit, parentId])
}

model Tag {
  id    Int    @id @default(autoincrement())
  label String @unique

  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
}

model CustomFeature {
  id    Int    @id @default(autoincrement())
  label String @unique

  product  Product[]
  category Category[]
}

model Basket {
  id       String           @id @default(cuid())
  variants BasketVariants[]

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model BasketVariants {
  id String @id @default(cuid())

  quantity Int @default(1)

  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  variantId String

  basket   Basket? @relation(fields: [basketId], references: [id], onDelete: Cascade)
  basketId String?

  createdAt DateTime @default(now())
}

enum PaymentStatus {
  NegativeAuthorization
  PositiveAuthorization
  PositiveFinish
  NegativeFinish
  Start
  PreStart
  Abort
  Fraud
  Order_processing
  Order_ready
  Order_sent
  Order_finished
}

model PaymentLink {
  id          String  @id @default(cuid())
  cashbillId  String?
  checkoutUrl String?

  createdAt DateTime @default(now())
}

enum ShippingType {
  COURIER
  INPOST
}

model ShippingAddress {
  id Int @id @default(autoincrement())

  method ShippingType

  inpostName           String?
  inpostCity           String?
  inpostProvince       String?
  inpostPostCode       String?
  inpostStreet         String?
  inpostBuildingNumber String?
  inpostFlatNumber     String?

  courierCity     String?
  courierProvince String?
  courierPostCode String?
  courierStreet   String?
  courierBuilding String?
  courierFlat     String?

  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId Int     @unique
}

model Payment {
  id Int @id @default(autoincrement())

  cashbillId String @unique

  checkoutUrl   String
  status        PaymentStatus
  productsPrice Float
  shippingPrice Float
  totalProducts Int
  products      PaymentProduct[]

  // Details
  firstName String
  surname   String
  email     String
  phone     String

  shipping ShippingAddress?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentProduct {
  id String @id @default(cuid())

  productPrice    Float
  productName     String
  productUnit     String
  productQuantity Int
  productCapacity Int

  originalProduct   Product? @relation(fields: [originalProductId], references: [id])
  originalProductId String?

  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId Int
}

model ShopConfig {
  id Int @id @default(autoincrement())

  inpostPrice  Float @default(15)
  courierPrice Float @default(20)

  inpostFreeShippingOverPrice Float @default(200)

  updatedAt DateTime @updatedAt
}

// [ ====== AUTH MODELS ====== ]
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  SUPPORT
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  basket        Basket?

  email        String?   @unique
  firstName    String?
  surname      String?
  phone        String?
  city         String?
  postcode     String?
  inpostId     String?
  inpostStreet String?
  payment      Payment[]

  wishList   WishList? @relation(fields: [wishListId], references: [id])
  wishListId String?
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  email   String
  expires DateTime

  @@unique([email, token])
}
