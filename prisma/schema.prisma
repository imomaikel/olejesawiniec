// [ ====== GENERAL SETTINGS START ====== ]
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// [ ====== SHOP MODELS ====== ]
model Product {
  id            String          @id @default(cuid())
  label         String          @unique
  link          String          @unique
  enabled       Boolean?        @default(false)
  description   String?         @db.Text
  mainPhoto     String?
  extraPhotos   ExtraPhoto[]
  variants      Variant[]
  lowestPrice   Float?
  tags          Tag[]
  details       ProductDetail[]
  nutritionFact NutritionFact?
  opinions      Opinion[]

  ratings Rating[]
  rating  Float

  Category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Category {
  id    String @id @default(cuid())
  label String

  Product Product[]
}

model Rating {
  id    String @id @default(cuid())
  score Int    @db.TinyInt

  // TODO AUTH PROFILE
  author String
  // 

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAd DateTime @default(now())
}

model Opinion {
  id         String  @id @default(cuid())
  showAvatar Boolean
  content    String

  // TODO AUTH PROFILE
  author String
  // 

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAt DateTime @default(now())
}

model NutritionFact {
  id                 String @id @default(cuid())
  fat                Float
  saturatedFat       Float?
  polyunsaturatedFat Float?
  monounsaturatedFat Float?
  carbohydrate       Float?
  carbohydrateSugar  Float?
  protein            Float?
  fiber              Float?
  sodium             Float?

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique
}

model ProductDetail {
  id      String @id @default(cuid())
  content String

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
}

model ExtraPhoto {
  id   String @id @default(cuid())
  url  String
  path String

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
}

model Variant {
  id       String @id @default(cuid())
  unit     String
  price    Float
  capacity Int
  stock    Int
  parentId String

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?

  @@unique([capacity, unit, parentId])
}

model Tag {
  id    Int    @id @default(autoincrement())
  label String @unique

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
}

// Auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  SUPPORT
  USER
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
}

model VerificationToken {
  id      String   @id @default(cuid())
  token   String   @unique
  email   String
  expires DateTime

  @@unique([email, token])
}
