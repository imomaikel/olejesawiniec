// [ ====== GENERAL SETTINGS START ====== ]
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// [ ====== SHOP MODELS ====== ]
model Product {
  id            String          @id @default(cuid())
  label         String          @unique
  link          String          @unique
  enabled       Boolean?        @default(false)
  description   String?         @db.Text
  mainPhoto     String?
  extraPhotos   ExtraPhoto[]
  variants      Variant[]
  tags          Tag[]
  details       ProductDetail[]
  nutritionFact NutritionFact?
  opinions      Opinion[]

  ratings Rating[]
  rating  Float

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Rating {
  id    String @id @default(cuid())
  score Int    @db.TinyInt

  // TODO AUTH PROFILE
  author String
  // 

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAd DateTime @default(now())
}

model Opinion {
  id         String  @id @default(cuid())
  showAvatar Boolean
  content    String

  // TODO AUTH PROFILE
  author String
  // 

  Product   Product? @relation(fields: [productId], references: [id])
  productId String?

  createdAt DateTime @default(now())
}

model NutritionFact {
  id                 String @id @default(cuid())
  fat                Float
  saturatedFat       Float?
  polyunsaturatedFat Float?
  monounsaturatedFat Float?
  carbohydrate       Float?
  carbohydrateSugar  Float?
  protein            Float?
  fiber              Float?
  sodium             Float?

  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @unique
}

model ProductDetail {
  id      String @id @default(cuid())
  content String

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
}

model ExtraPhoto {
  id   String @id @default(cuid())
  url  String
  path String

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
}

model Variant {
  id       String @id @default(cuid())
  unit     String
  price    Float
  capacity Int
  stock    Int
  parentId String

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?

  @@unique([capacity, unit, parentId])
}

model Tag {
  id    Int    @id @default(autoincrement())
  label String @unique

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId String?
}
